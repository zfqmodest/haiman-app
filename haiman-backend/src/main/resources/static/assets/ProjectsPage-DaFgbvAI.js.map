{"version":3,"file":"ProjectsPage-DaFgbvAI.js","sources":["../../src/data/pages/materials.ts","../../src/stores/materials.ts","../../src/pages/projects/composables/useMaterials.ts","../../src/composables/useProducts.ts","../../src/pages/projects/widgets/MaterialsTable.vue","../../src/pages/projects/widgets/MaterialsCards.vue","../../src/pages/projects/widgets/EditMaterialForm.vue","../../src/components/forms/EditProductForm/EditProductForm.vue","../../src/pages/projects/ProjectsPage.vue"],"sourcesContent":["import { Material, Product, EmptyProduct } from '../../pages/projects/types'\nimport { v4 as uuid } from 'uuid'\n\n// 产品状态映射\nexport const getProductStatusText = (status: Product['status']): string => {\n  const statusMap = {\n    not_started: '未开始',\n    in_progress: '进行中',\n    completed: '已完成',\n    failed: '失败',\n  }\n  return statusMap[status] || status\n}\n\n// 临时内存存储，模拟数据库\nconst inMemoryMaterials: Material[] = [\n  {\n    id: 'material-001-2023-001' as any,\n    material_code: 'MAT-001',\n    material_name: '钢材-Q235',\n    created_at: '2023-12-01T08:00:00Z',\n    product_count: 15,\n    test_items: ['抗拉强度测试', '硬度测试', '化学成分分析'],\n  },\n  {\n    id: 'material-002-2023-002' as any,\n    material_code: 'MAT-002',\n    material_name: '铝合金-6061',\n    created_at: '2023-12-03T10:30:00Z',\n    product_count: 8,\n    test_items: ['抗拉强度测试', '耐腐蚀性测试', '表面粗糙度测试'],\n  },\n  {\n    id: 'material-003-2023-003' as any,\n    material_code: 'MAT-003',\n    material_name: '碳纤维复合材料',\n    created_at: '2023-12-05T14:15:00Z',\n    product_count: 3,\n    test_items: ['拉伸模量测试', '弯曲强度测试', '层间剪切强度测试', '疲劳测试'],\n  },\n  {\n    id: 'material-004-2023-004' as any,\n    material_code: 'MAT-004',\n    material_name: '不锈钢-304',\n    created_at: '2023-12-07T09:45:00Z',\n    product_count: 22,\n    test_items: ['抗拉强度测试', '耐腐蚀性测试', '硬度测试'],\n  },\n  {\n    id: 'material-005-2023-005' as any,\n    material_code: 'MAT-005',\n    material_name: '聚合物材料-PVC',\n    created_at: '2023-12-10T11:20:00Z',\n    product_count: 12,\n    test_items: ['拉伸强度测试', '冲击强度测试', '热变形温度测试'],\n  },\n  {\n    id: 'material-006-2023-006' as any,\n    material_code: 'MAT-006',\n    material_name: '钛合金-Ti6Al4V',\n    created_at: '2023-12-12T16:30:00Z',\n    product_count: 5,\n    test_items: ['抗拉强度测试', '疲劳测试', '生物相容性测试', '密度测试'],\n  },\n]\n\nexport type Pagination = {\n  page: number\n  perPage: number\n  total: number\n}\n\nexport type Sorting = {\n  sortBy: 'material_code' | 'material_name' | 'created_at' | 'product_count' | undefined\n  sortingOrder: 'asc' | 'desc' | null\n}\n\nexport type Filters = {\n  search: string\n}\n\nexport const getMaterials = async (filters: Partial<Filters & Pagination & Sorting>) => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  const { search, sortBy, sortingOrder } = filters\n  let filteredMaterials: Material[] = [...inMemoryMaterials]\n\n  // 动态计算每个物料的产品数量\n  filteredMaterials = filteredMaterials.map((material) => ({\n    ...material,\n    product_count: inMemoryProducts.filter((product) => product.material_id === material.id).length,\n  }))\n\n  // 根据搜索词筛选\n  if (search) {\n    filteredMaterials = filteredMaterials.filter(\n      (material) =>\n        material.material_code.toLowerCase().includes(search.toLowerCase()) ||\n        material.material_name.toLowerCase().includes(search.toLowerCase()) ||\n        material.test_items.some((item) => item.toLowerCase().includes(search.toLowerCase())),\n    )\n  }\n\n  // 排序\n  if (sortBy && sortingOrder) {\n    filteredMaterials.sort((a, b) => {\n      const aValue = a[sortBy]\n      const bValue = b[sortBy]\n\n      if (sortingOrder === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0\n      }\n    })\n  }\n\n  const { page = 1, perPage = 10 } = filters || {}\n  const start = (page - 1) * perPage\n  const end = start + perPage\n\n  return {\n    data: filteredMaterials.slice(start, end),\n    pagination: {\n      page,\n      perPage,\n      total: filteredMaterials.length,\n    },\n  }\n}\n\nexport const addMaterial = async (material: Omit<Material, 'id' | 'created_at'>) => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  // 生成新的物料\n  const newMaterial: Material = {\n    ...material,\n    id: uuid() as any,\n    created_at: new Date().toISOString(),\n  }\n\n  // 添加到内存存储\n  inMemoryMaterials.unshift(newMaterial)\n\n  return [newMaterial]\n}\n\nexport const updateMaterial = async (material: Material) => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  const index = inMemoryMaterials.findIndex((m) => m.id === material.id)\n  if (index !== -1) {\n    inMemoryMaterials[index] = material\n  }\n\n  return [material]\n}\n\nexport const removeMaterial = async (material: Material) => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  const index = inMemoryMaterials.findIndex((m) => m.id === material.id)\n  if (index !== -1) {\n    inMemoryMaterials.splice(index, 1)\n    // 同时删除该物料下的所有产品\n    const productIndexes = inMemoryProducts\n      .map((p, idx) => (p.material_id === material.id ? idx : -1))\n      .filter((idx) => idx !== -1)\n      .reverse() // 从后往前删除，避免索引错位\n\n    productIndexes.forEach((idx) => {\n      inMemoryProducts.splice(idx, 1)\n    })\n  }\n\n  return true\n}\n\n// 产品内存存储\nconst inMemoryProducts: Product[] = [\n  {\n    id: 'product-001-001' as any,\n    product_serial: 'PROD-001-001',\n    product_name: 'Q235钢板-1号',\n    material_id: 'material-001-2023-001' as any,\n    created_at: '2023-12-01T09:00:00Z',\n    status: 'not_started',\n    test_items: ['拉伸试验', '冲击试验', '硬度测试'], // 继承自物料\n  },\n  {\n    id: 'product-001-002' as any,\n    product_serial: 'PROD-001-002',\n    product_name: 'Q235钢管-1号',\n    material_id: 'material-001-2023-001' as any,\n    created_at: '2023-12-01T10:00:00Z',\n    status: 'in_progress',\n    test_items: ['拉伸试验', '冲击试验', '硬度测试'], // 继承自物料\n  },\n  {\n    id: 'product-002-001' as any,\n    product_serial: 'PROD-002-001',\n    product_name: '6061铝板-1号',\n    material_id: 'material-002-2023-002' as any,\n    created_at: '2023-12-03T11:00:00Z',\n    status: 'completed',\n    test_items: ['拉伸试验', '弯曲试验', '腐蚀测试'], // 继承自物料\n  },\n]\n\n// 获取指定物料下的所有产品\nexport const getProductsByMaterialId = async (materialId: string): Promise<Product[]> => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 100))\n\n  return inMemoryProducts.filter((product) => product.material_id === materialId)\n}\n\n// 获取所有产品\nexport const getAllProducts = async (): Promise<Product[]> => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 100))\n\n  return [...inMemoryProducts]\n}\n\n// 添加产品\nexport const addProduct = async (product: EmptyProduct, materialId: string): Promise<Product[]> => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  // 找到对应的物料，获取其测试项\n  const material = inMemoryMaterials.find((m) => m.id === materialId)\n  if (!material) {\n    throw new Error('Material not found')\n  }\n\n  // 生成新的产品，测试项继承自物料\n  const newProduct: Product = {\n    ...product,\n    id: uuid() as any,\n    material_id: materialId as any,\n    created_at: new Date().toISOString(),\n    status: product.status || 'not_started',\n    test_items: [...material.test_items], // 继承物料的测试项\n  }\n\n  // 添加到内存存储\n  inMemoryProducts.unshift(newProduct)\n\n  return [newProduct]\n}\n\n// 更新产品\nexport const updateProduct = async (product: Product): Promise<Product[]> => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  // 找到对应的物料，确保测试项一致\n  const material = inMemoryMaterials.find((m) => m.id === product.material_id)\n  if (!material) {\n    throw new Error('Material not found')\n  }\n\n  // 更新产品，但测试项始终与物料保持一致\n  const updatedProduct: Product = {\n    ...product,\n    test_items: [...material.test_items], // 始终使用物料的测试项\n  }\n\n  const index = inMemoryProducts.findIndex((p) => p.id === product.id)\n  if (index !== -1) {\n    inMemoryProducts[index] = updatedProduct\n  }\n\n  return [updatedProduct]\n}\n\n// 删除产品\nexport const removeProduct = async (product: Product): Promise<boolean> => {\n  // 模拟 API 延迟\n  await new Promise((resolve) => setTimeout(resolve, 300))\n\n  const index = inMemoryProducts.findIndex((p) => p.id === product.id)\n  if (index !== -1) {\n    inMemoryProducts.splice(index, 1)\n  }\n\n  return true\n}\n","import { defineStore } from 'pinia'\nimport {\n  addMaterial,\n  type Filters,\n  getMaterials,\n  type Pagination,\n  removeMaterial,\n  type Sorting,\n  updateMaterial,\n} from '../data/pages/materials'\nimport { Material } from '../pages/projects/types'\n\nexport const useMaterialsStore = defineStore('materials', {\n  state: () => {\n    return {\n      items: [] as Material[],\n      pagination: { page: 1, perPage: 10, total: 0 },\n    }\n  },\n\n  actions: {\n    async getAll(options: { pagination?: Pagination; sorting?: Sorting; filters?: Partial<Filters> }) {\n      const { data, pagination } = await getMaterials({\n        ...options.filters,\n        ...options.sorting,\n        ...options.pagination,\n      })\n      this.items = data\n      this.pagination = pagination\n    },\n\n    async add(material: Omit<Material, 'id' | 'created_at'>) {\n      const [newMaterial] = await addMaterial(material)\n      return newMaterial\n    },\n\n    async update(material: Material) {\n      const [updatedMaterial] = await updateMaterial(material)\n      return updatedMaterial\n    },\n\n    async remove(material: Material) {\n      return await removeMaterial(material)\n    },\n  },\n})\n","import { ref, unref, computed, onMounted } from 'vue'\nimport type { Ref } from 'vue'\nimport { useMaterialsStore } from '../../../stores/materials'\nimport type { Pagination, Sorting, Filters } from '../../../data/pages/materials'\nimport { Material, EmptyMaterial } from '../types'\n\n// 物料专用的排序类型\nexport type MaterialSorting = {\n  sortBy: 'material_code' | 'material_name' | 'created_at' | 'product_count'\n  sortingOrder: 'asc' | 'desc' | null\n}\n\nconst makePaginationRef = () => ref<Pagination>({ page: 1, perPage: 10, total: 0 })\nconst makeSortingRef = () => ref<Sorting>({ sortBy: 'material_code', sortingOrder: 'asc' })\nconst makeFiltersRef = () => ref<Partial<Filters>>({ search: '' })\n\nexport const useMaterials = (options?: {\n  sorting?: Ref<Sorting>\n  pagination?: Ref<Pagination>\n  filters?: Ref<Partial<Filters>>\n}) => {\n  const isLoading = ref(false)\n  const materialsStore = useMaterialsStore()\n\n  const { sorting = makeSortingRef(), pagination = makePaginationRef(), filters = makeFiltersRef() } = options ?? {}\n\n  const fetch = async () => {\n    isLoading.value = true\n    console.log('🔄 Starting fetch, setting isLoading = true')\n    try {\n      console.log('📞 Calling materialsStore.getAll...')\n      await materialsStore.getAll({\n        pagination: unref(pagination),\n        sorting: unref(sorting),\n        filters: unref(filters),\n      })\n      pagination.value = materialsStore.pagination\n      console.log('✅ Data loaded successfully, items count:', materialsStore.items.length)\n    } catch (error) {\n      console.error('❌ Error fetching materials:', error)\n    } finally {\n      console.log('🏁 Setting isLoading = false')\n      isLoading.value = false\n      console.log('📊 Final state - isLoading:', isLoading.value, 'materials count:', materialsStore.items.length)\n    }\n  }\n\n  const materials = computed(() => materialsStore.items)\n\n  // 只在组件挂载时加载一次数据\n  onMounted(() => {\n    console.log('� Component mounted, calling fetch...')\n    fetch()\n  })\n\n  const add = async (material: EmptyMaterial) => {\n    isLoading.value = true\n    try {\n      await materialsStore.add(material)\n      await fetch() // 添加后手动刷新\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const update = async (material: Material) => {\n    isLoading.value = true\n    try {\n      await materialsStore.update(material)\n      await fetch() // 更新后手动刷新\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const remove = async (material: Material) => {\n    isLoading.value = true\n    try {\n      await materialsStore.remove(material)\n      await fetch() // 删除后手动刷新\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  return {\n    materials,\n    isLoading,\n    pagination,\n    sorting,\n    filters,\n    add,\n    update,\n    remove,\n    fetch,\n  }\n}\n","import { ref, Ref } from 'vue'\nimport { Product, EmptyProduct } from '../pages/projects/types'\nimport {\n  getProductsByMaterialId,\n  getAllProducts,\n  addProduct,\n  updateProduct,\n  removeProduct,\n  getProductStatusText,\n} from '../data/pages/materials'\n\nconst isLoading = ref(false)\nconst products: Ref<Product[]> = ref([])\n\nexport function useProducts() {\n  const add = async (product: EmptyProduct, materialId: string) => {\n    isLoading.value = true\n    try {\n      const addedProducts = await addProduct(product, materialId)\n      if (addedProducts.length > 0) {\n        products.value.unshift(addedProducts[0])\n      }\n      return addedProducts\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const update = async (product: Product) => {\n    isLoading.value = true\n    try {\n      const updatedProducts = await updateProduct(product)\n      if (updatedProducts.length > 0) {\n        const index = products.value.findIndex((p) => p.id === product.id)\n        if (index !== -1) {\n          products.value[index] = updatedProducts[0]\n        }\n      }\n      return updatedProducts\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const remove = async (product: Product) => {\n    isLoading.value = true\n    try {\n      const result = await removeProduct(product)\n      if (result) {\n        const index = products.value.findIndex((p) => p.id === product.id)\n        if (index !== -1) {\n          products.value.splice(index, 1)\n        }\n      }\n      return result\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const load = async () => {\n    isLoading.value = true\n    try {\n      products.value = await getAllProducts()\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const loadByMaterialId = async (materialId: string) => {\n    isLoading.value = true\n    try {\n      const materialProducts = await getProductsByMaterialId(materialId)\n      // 更新全局products数组中对应的产品\n      const filteredProducts = products.value.filter((p) => p.material_id !== materialId)\n      products.value = [...filteredProducts, ...materialProducts]\n      return materialProducts\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  // 根据物料ID获取产品\n  const getProductsByMaterial = (materialId: string): Product[] => {\n    return products.value.filter((p) => p.material_id === materialId)\n  }\n\n  return {\n    products,\n    isLoading,\n    add,\n    update,\n    remove,\n    load,\n    loadByMaterialId,\n    getProductsByMaterial,\n    getProductStatusText,\n  }\n}\n","<script setup lang=\"ts\">\nimport { PropType, computed, ref } from 'vue'\nimport { defineVaDataTableColumns } from 'vuestic-ui'\nimport { useI18n } from 'vue-i18n'\nimport { Material, Product } from '../types'\nimport { Pagination, Sorting } from '../../../data/pages/materials'\nimport { useVModel } from '@vueuse/core'\nimport { useProducts } from '../../../composables/useProducts'\n\nconst { t } = useI18n()\nconst { getProductsByMaterial } = useProducts()\n\n// 定义表格行数据类型\ninterface TableRow {\n  id: string\n  type: 'material' | 'product'\n  level: number\n  material?: Material\n  product?: Product\n  parentId?: string\n}\n\nconst columns = computed(() =>\n  defineVaDataTableColumns([\n    { label: t('materials.table.name'), key: 'name', sortable: false },\n    { label: t('materials.table.description'), key: 'description', sortable: false },\n    { label: t('materials.table.type'), key: 'type', sortable: false },\n    { label: t('materials.table.status'), key: 'status', sortable: false },\n    { label: t('materials.table.testItems'), key: 'test_items', sortable: false },\n    { label: t('materials.table.actions'), key: 'actions', sortable: false },\n  ]),\n)\n\nconst props = defineProps({\n  materials: {\n    type: Array as PropType<Material[]>,\n    required: true,\n  },\n  loading: {\n    type: Boolean,\n    required: true,\n  },\n  sortBy: {\n    type: String as PropType<Sorting['sortBy']>,\n    default: undefined,\n  },\n  sortingOrder: {\n    type: String as PropType<Sorting['sortingOrder']>,\n    default: undefined,\n  },\n  pagination: {\n    type: Object as PropType<Pagination>,\n    required: true,\n  },\n  searchQuery: {\n    type: String,\n    default: '',\n  },\n})\n\nconst emit = defineEmits<{\n  (event: 'edit', material: Material): void\n  (event: 'delete', material: Material): void\n  (event: 'addProduct', material: Material): void\n  (event: 'editProduct', product: Product, material: Material): void\n  (event: 'deleteProduct', product: Product, material: Material): void\n}>()\n\nconst sortByVModel = useVModel(props, 'sortBy', emit)\nconst sortingOrderVModel = useVModel(props, 'sortingOrder', emit)\n\n// 管理展开状态\nconst expandedMaterials = ref<Set<string>>(new Set())\n\n// 过滤数据\nconst filteredMaterials = computed(() => {\n  if (!props.searchQuery.trim()) {\n    return props.materials\n  }\n\n  const query = props.searchQuery.toLowerCase().trim()\n  return props.materials.filter((material) => {\n    // 搜索物料\n    const materialMatch =\n      material.material_code.toLowerCase().includes(query) ||\n      material.material_name.toLowerCase().includes(query) ||\n      material.test_items.some((item) => item.toLowerCase().includes(query))\n\n    // 搜索该物料下的产品\n    const materialProducts = getProductsByMaterial(material.id)\n    const productMatch = materialProducts.some(\n      (product) =>\n        product.product_serial.toLowerCase().includes(query) ||\n        product.product_name.toLowerCase().includes(query) ||\n        product.test_items.some((item) => item.toLowerCase().includes(query)),\n    )\n\n    return materialMatch || productMatch\n  })\n})\n\n// 构建表格数据，展开物料显示产品\nconst tableData = computed(() => {\n  const rows: TableRow[] = []\n\n  filteredMaterials.value.forEach((material) => {\n    // 添加物料行\n    rows.push({\n      id: material.id,\n      type: 'material',\n      level: 0,\n      material,\n    })\n\n    const materialProducts = getProductsByMaterial(material.id)\n    const hasSearchQuery = props.searchQuery.trim()\n\n    // 如果有搜索查询，过滤产品\n    const productsToShow = hasSearchQuery\n      ? materialProducts.filter((product) => {\n          const query = props.searchQuery.toLowerCase()\n          return (\n            product.product_serial.toLowerCase().includes(query) ||\n            product.product_name.toLowerCase().includes(query) ||\n            product.test_items.some((item) => item.toLowerCase().includes(query))\n          )\n        })\n      : materialProducts\n\n    // 如果物料已展开，或者有搜索查询且有匹配的产品，显示产品\n    const shouldShowProducts = expandedMaterials.value.has(material.id) || (hasSearchQuery && productsToShow.length > 0)\n\n    if (shouldShowProducts) {\n      // 如果有搜索查询且有匹配产品，自动展开物料\n      if (hasSearchQuery && productsToShow.length > 0) {\n        expandedMaterials.value.add(material.id)\n      }\n\n      productsToShow.forEach((product) => {\n        rows.push({\n          id: `product-${product.id}`,\n          type: 'product',\n          level: 1,\n          product,\n          parentId: material.id,\n        })\n      })\n    }\n  })\n\n  return rows\n})\n\n// 切换物料展开状态\nconst toggleMaterial = (materialId: string) => {\n  if (expandedMaterials.value.has(materialId)) {\n    expandedMaterials.value.delete(materialId)\n  } else {\n    expandedMaterials.value.add(materialId)\n  }\n}\n\n// 查找产品所属的物料\nconst findProductMaterial = (productId: string): Material | undefined => {\n  for (const material of props.materials) {\n    const materialProducts = getProductsByMaterial(material.id)\n    if (materialProducts.some((p) => p.id === productId)) {\n      return material\n    }\n  }\n  return undefined\n}\n\n// 获取产品状态文本和颜色\nconst getProductStatusInfo = (status: Product['status']) => {\n  const statusMap = {\n    not_started: { text: '未开始', color: 'secondary' },\n    in_progress: { text: '进行中', color: 'warning' },\n    completed: { text: '已完成', color: 'success' },\n    failed: { text: '失败', color: 'danger' },\n  }\n  return statusMap[status] || { text: status, color: 'secondary' }\n}\n\nconst totalPages = computed(() => Math.ceil(props.pagination.total / props.pagination.perPage))\n</script>\n\n<template>\n  <div>\n    <VaDataTable\n      v-model:sort-by=\"sortByVModel\"\n      v-model:sorting-order=\"sortingOrderVModel\"\n      :items=\"tableData\"\n      :columns=\"columns\"\n      :loading=\"loading\"\n      class=\"materials-tree-table\"\n    >\n      <!-- 名称/编号列 -->\n      <template #cell(name)=\"{ rowData }\">\n        <div :class=\"['flex items-center', rowData.level > 0 ? 'pl-8' : '']\">\n          <!-- 物料行 -->\n          <template v-if=\"rowData.type === 'material' && rowData.material\">\n            <VaButton\n              :icon=\"expandedMaterials.has(rowData.material.id) ? 'expand_more' : 'chevron_right'\"\n              preset=\"plain\"\n              size=\"small\"\n              class=\"mr-2\"\n              @click=\"toggleMaterial(rowData.material.id)\"\n            />\n            <VaIcon name=\"inventory\" class=\"mr-2 text-primary\" />\n            <span class=\"font-semibold text-primary\">{{ rowData.material.material_code }}</span>\n          </template>\n\n          <!-- 产品行 -->\n          <template v-else-if=\"rowData.type === 'product' && rowData.product\">\n            <VaIcon name=\"widgets\" class=\"mr-2 text-secondary\" />\n            <span class=\"text-secondary\">{{ rowData.product.product_serial }}</span>\n          </template>\n        </div>\n      </template>\n\n      <!-- 描述列 -->\n      <template #cell(description)=\"{ rowData }\">\n        <div :class=\"['ellipsis max-w-[200px]', rowData.level > 0 ? 'text-gray-600' : '']\">\n          <template v-if=\"rowData.type === 'material' && rowData.material\">\n            {{ rowData.material.material_name }}\n          </template>\n          <template v-else-if=\"rowData.type === 'product' && rowData.product\">\n            {{ rowData.product.product_name }}\n          </template>\n        </div>\n      </template>\n\n      <!-- 类型列 -->\n      <template #cell(type)=\"{ rowData }\">\n        <VaBadge v-if=\"rowData.type === 'material'\" :text=\"t('materials.type.material')\" color=\"primary\" size=\"small\" />\n        <VaBadge v-else :text=\"t('materials.type.product')\" color=\"secondary\" size=\"small\" />\n      </template>\n\n      <!-- 数量/状态列 -->\n      <template #cell(status)=\"{ rowData }\">\n        <template v-if=\"rowData.type === 'material' && rowData.material\">\n          <VaBadge\n            :text=\"t('materials.status.productCount', { count: rowData.material.product_count })\"\n            color=\"info\"\n            size=\"small\"\n          />\n        </template>\n        <template v-else-if=\"rowData.type === 'product' && rowData.product\">\n          <VaBadge\n            :text=\"getProductStatusInfo(rowData.product.status).text\"\n            :color=\"getProductStatusInfo(rowData.product.status).color\"\n            size=\"small\"\n          />\n        </template>\n      </template>\n\n      <!-- 测试项列 -->\n      <template #cell(test_items)=\"{ rowData }\">\n        <template v-if=\"rowData.type === 'material' && rowData.material\">\n          <div class=\"flex flex-wrap gap-1\">\n            <VaBadge\n              v-for=\"item in rowData.material.test_items\"\n              :key=\"item\"\n              :text=\"item\"\n              color=\"success\"\n              size=\"small\"\n            />\n          </div>\n        </template>\n        <template v-else-if=\"rowData.type === 'product' && rowData.product\">\n          <div class=\"flex flex-wrap gap-1\">\n            <VaBadge v-for=\"item in rowData.product.test_items\" :key=\"item\" :text=\"item\" color=\"success\" size=\"small\" />\n          </div>\n        </template>\n      </template>\n\n      <!-- 操作列 -->\n      <template #cell(actions)=\"{ rowData }\">\n        <!-- 物料操作 -->\n        <template v-if=\"rowData.type === 'material' && rowData.material\">\n          <div class=\"flex gap-2 items-center\">\n            <VaButton\n              preset=\"primary\"\n              size=\"small\"\n              color=\"success\"\n              icon=\"add\"\n              :aria-label=\"'添加产品'\"\n              @click=\"$emit('addProduct', rowData.material)\"\n            >\n              添加产品\n            </VaButton>\n            <VaButton\n              preset=\"primary\"\n              size=\"small\"\n              color=\"primary\"\n              icon=\"edit\"\n              :aria-label=\"'编辑物料'\"\n              @click=\"$emit('edit', rowData.material)\"\n            >\n              编辑\n            </VaButton>\n            <VaButton\n              preset=\"primary\"\n              size=\"small\"\n              icon=\"delete\"\n              color=\"danger\"\n              :aria-label=\"'删除物料'\"\n              @click=\"$emit('delete', rowData.material)\"\n            >\n              删除\n            </VaButton>\n          </div>\n        </template>\n\n        <!-- 产品操作 -->\n        <template v-else-if=\"rowData.type === 'product' && rowData.product\">\n          <div class=\"flex gap-2 items-center\">\n            <VaButton\n              preset=\"primary\"\n              size=\"small\"\n              color=\"primary\"\n              icon=\"edit\"\n              :aria-label=\"'编辑产品'\"\n              @click=\"\n                () => {\n                  const material = findProductMaterial(rowData.product!.id)\n                  if (material) $emit('editProduct', rowData.product!, material)\n                }\n              \"\n            >\n              编辑\n            </VaButton>\n            <VaButton\n              preset=\"primary\"\n              size=\"small\"\n              icon=\"delete\"\n              color=\"danger\"\n              :aria-label=\"'删除产品'\"\n              @click=\"\n                () => {\n                  const material = findProductMaterial(rowData.product!.id)\n                  if (material) $emit('deleteProduct', rowData.product!, material)\n                }\n              \"\n            >\n              删除\n            </VaButton>\n          </div>\n        </template>\n      </template>\n    </VaDataTable>\n\n    <div class=\"flex flex-col-reverse md:flex-row gap-2 justify-between items-center py-2\">\n      <div>\n        <b>{{ $props.pagination.total }} {{ t('materials.table.results') || '条结果' }}.</b>\n        {{ t('materials.table.resultsPerPage') || '每页显示' }}\n        <VaSelect v-model=\"$props.pagination.perPage\" class=\"!w-20\" :options=\"[10, 50, 100]\" />\n      </div>\n\n      <div v-if=\"totalPages > 1\" class=\"flex\">\n        <VaButton\n          preset=\"secondary\"\n          icon=\"va-arrow-left\"\n          :aria-label=\"t('materials.table.previousPage') || '上一页'\"\n          :disabled=\"$props.pagination.page === 1\"\n          @click=\"$props.pagination.page--\"\n        />\n        <VaButton\n          class=\"mr-2\"\n          preset=\"secondary\"\n          icon=\"va-arrow-right\"\n          :aria-label=\"t('materials.table.nextPage') || '下一页'\"\n          :disabled=\"$props.pagination.page === totalPages\"\n          @click=\"$props.pagination.page++\"\n        />\n        <VaPagination\n          v-model=\"$props.pagination.page\"\n          buttons-preset=\"secondary\"\n          :pages=\"totalPages\"\n          :visible-pages=\"5\"\n          :boundary-links=\"false\"\n          :direction-links=\"false\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.materials-tree-table {\n  :deep(.va-data-table__table-tr) {\n    border-bottom: 1px solid var(--va-background-border);\n\n    &:hover {\n      background-color: var(--va-background-element);\n    }\n  }\n\n  :deep(.va-data-table__table-td) {\n    vertical-align: middle;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { type PropType, ref } from 'vue'\nimport { type Material, type Product } from '../types'\nimport { useI18n } from 'vue-i18n'\nimport { useProducts } from '../../../composables/useProducts'\n\nconst { t } = useI18n()\nconst { loadByMaterialId, getProductStatusText, getProductsByMaterial } = useProducts()\n\ndefineProps({\n  materials: {\n    type: Array as PropType<Material[]>,\n    required: true,\n  },\n  loading: {\n    type: Boolean,\n    required: true,\n  },\n})\n\ndefineEmits<{\n  (event: 'edit', material: Material): void\n  (event: 'delete', material: Material): void\n  (event: 'addProduct', material: Material): void\n  (event: 'editProduct', product: Product): void\n  (event: 'deleteProduct', product: Product): void\n}>()\n\n// 展开/收起状态\nconst expandedMaterials = ref<Set<string>>(new Set())\n// 产品加载状态\nconst productLoadingStates = ref<Map<string, boolean>>(new Map())\n\n// 切换展开/收起状态\nconst toggleExpanded = async (materialId: string) => {\n  if (expandedMaterials.value.has(materialId)) {\n    expandedMaterials.value.delete(materialId)\n  } else {\n    expandedMaterials.value.add(materialId)\n\n    // 如果还没加载过产品，则加载\n    if (!productLoadingStates.value.has(materialId)) {\n      await loadProductsForMaterial(materialId)\n    }\n  }\n}\n\n// 加载指定物料的产品\nconst loadProductsForMaterial = async (materialId: string) => {\n  productLoadingStates.value.set(materialId, true)\n  try {\n    await loadByMaterialId(materialId)\n    productLoadingStates.value.set(materialId, false)\n  } catch (error) {\n    productLoadingStates.value.set(materialId, false)\n    console.error('加载产品失败:', error)\n  }\n}\n\n// 判断物料是否展开\nconst isMaterialExpanded = (materialId: string) => {\n  return expandedMaterials.value.has(materialId)\n}\n\n// 获取物料的产品列表\nconst getMaterialProducts = (materialId: string): Product[] => {\n  return getProductsByMaterial(materialId)\n}\n\n// 判断产品是否正在加载\nconst isProductLoading = (materialId: string): boolean => {\n  return productLoadingStates.value.get(materialId) || false\n}\n</script>\n\n<template>\n  <div class=\"min-h-[4rem]\">\n    <!-- Loading state -->\n    <div v-if=\"loading\" class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      <VaCard v-for=\"i in 6\" :key=\"i\" outlined>\n        <VaCardContent class=\"flex flex-col h-full p-4\">\n          <VaSkeleton height=\"20px\" class=\"mb-2\" />\n          <VaSkeleton height=\"32px\" class=\"mb-4\" />\n          <VaSkeleton height=\"20px\" class=\"mb-4\" />\n          <VaSkeleton height=\"40px\" class=\"mb-4\" />\n          <div class=\"flex justify-between mt-auto\">\n            <VaSkeleton height=\"32px\" width=\"32px\" />\n            <VaSkeleton height=\"32px\" width=\"32px\" />\n          </div>\n        </VaCardContent>\n      </VaCard>\n    </div>\n\n    <!-- Materials data -->\n    <div v-else-if=\"materials.length > 0\" class=\"space-y-4\">\n      <VaCard\n        v-for=\"material in materials\"\n        :key=\"material.id\"\n        :style=\"{ '--va-card-outlined-border': '1px solid var(--va-background-element)' }\"\n        outlined\n      >\n        <VaCardContent class=\"flex flex-col\">\n          <!-- 物料信息 -->\n          <div class=\"flex items-center justify-between mb-4\">\n            <div class=\"flex items-center gap-4 flex-1\">\n              <!-- 展开/收起按钮 -->\n              <VaButton\n                preset=\"secondary\"\n                :icon=\"isMaterialExpanded(material.id) ? 'mso-keyboard_arrow_down' : 'mso-keyboard_arrow_right'\"\n                size=\"small\"\n                @click=\"toggleExpanded(material.id)\"\n              />\n\n              <!-- 物料基本信息 -->\n              <div class=\"flex-1\">\n                <div class=\"flex items-center gap-4\">\n                  <div class=\"text-primary font-semibold text-lg\">{{ material.material_code }}</div>\n                  <h4 class=\"va-h5\">{{ material.material_name }}</h4>\n                </div>\n                <div class=\"text-[var(--va-secondary)] text-sm mt-1\">\n                  {{ new Date(material.created_at).toLocaleDateString() }}\n                </div>\n              </div>\n\n              <!-- 产品数量 -->\n              <div class=\"flex items-center gap-2\">\n                <span class=\"text-[var(--va-secondary)]\">{{ t('materials.table.productCount') }}:</span>\n                <VaBadge :text=\"material.product_count.toString()\" color=\"info\" />\n              </div>\n            </div>\n          </div>\n\n          <!-- 测试项 -->\n          <div class=\"flex flex-col gap-2 mb-4\">\n            <span class=\"text-[var(--va-secondary)] text-sm\">{{ t('materials.table.testItems') }}:</span>\n            <div class=\"flex flex-wrap gap-1\">\n              <VaBadge v-for=\"item in material.test_items\" :key=\"item\" :text=\"item\" color=\"success\" size=\"small\" />\n            </div>\n          </div>\n\n          <!-- 物料操作按钮 -->\n          <div class=\"flex justify-between items-center mb-4\">\n            <!-- 添加产品按钮 -->\n            <VaButton preset=\"primary\" icon=\"mso-add\" @click=\"$emit('addProduct', material)\">\n              {{ t('products.form.addTitle') }}\n            </VaButton>\n\n            <!-- 物料管理按钮 -->\n            <div class=\"flex gap-2\">\n              <VaButton\n                preset=\"secondary\"\n                icon=\"mso-edit\"\n                color=\"primary\"\n                :aria-label=\"t('materials.table.editMaterial')\"\n                @click=\"$emit('edit', material)\"\n              >\n                {{ t('materials.table.editMaterial') }}\n              </VaButton>\n              <VaButton\n                preset=\"secondary\"\n                icon=\"mso-delete\"\n                color=\"danger\"\n                :aria-label=\"t('materials.table.deleteMaterial')\"\n                @click=\"$emit('delete', material)\"\n              >\n                {{ t('materials.table.deleteMaterial') }}\n              </VaButton>\n            </div>\n          </div>\n\n          <!-- 产品列表（展开时显示） -->\n          <div v-if=\"isMaterialExpanded(material.id)\" class=\"mt-4 border-t pt-4\">\n            <!-- 产品加载状态 -->\n            <div v-if=\"isProductLoading(material.id)\" class=\"space-y-2\">\n              <VaSkeleton v-for=\"i in 3\" :key=\"i\" height=\"60px\" />\n            </div>\n\n            <!-- 产品列表 -->\n            <div v-else-if=\"getMaterialProducts(material.id).length > 0\" class=\"space-y-3\">\n              <VaCard\n                v-for=\"product in getMaterialProducts(material.id)\"\n                :key=\"product.id\"\n                class=\"bg-[var(--va-background-secondary)]\"\n                outlined\n              >\n                <VaCardContent class=\"p-4\">\n                  <div class=\"flex items-center justify-between\">\n                    <div class=\"flex-1\">\n                      <div class=\"flex items-center gap-4 mb-2\">\n                        <span class=\"font-medium\">{{ product.product_serial }}</span>\n                        <span class=\"text-[var(--va-secondary)]\">{{ product.product_name }}</span>\n                      </div>\n                      <div class=\"flex items-center gap-4 text-sm text-[var(--va-secondary)]\">\n                        <span>{{ new Date(product.created_at).toLocaleDateString() }}</span>\n                        <VaBadge\n                          :text=\"getProductStatusText(product.status)\"\n                          :color=\"\n                            product.status === 'completed'\n                              ? 'success'\n                              : product.status === 'in_progress'\n                                ? 'warning'\n                                : 'info'\n                          \"\n                          size=\"small\"\n                        />\n                      </div>\n                      <!-- 产品测试项 -->\n                      <div v-if=\"product.test_items && product.test_items.length > 0\" class=\"mt-2\">\n                        <div class=\"text-xs text-[var(--va-secondary)] mb-1\">{{ t('materials.table.testItems') }}:</div>\n                        <div class=\"flex flex-wrap gap-1\">\n                          <VaBadge\n                            v-for=\"item in product.test_items\"\n                            :key=\"item\"\n                            :text=\"item\"\n                            color=\"success\"\n                            size=\"small\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- 产品操作按钮 -->\n                    <div class=\"flex gap-1\">\n                      <VaButton\n                        preset=\"secondary\"\n                        icon=\"mso-edit\"\n                        color=\"primary\"\n                        size=\"small\"\n                        @click=\"$emit('editProduct', product)\"\n                      />\n                      <VaButton\n                        preset=\"secondary\"\n                        icon=\"mso-delete\"\n                        color=\"danger\"\n                        size=\"small\"\n                        @click=\"$emit('deleteProduct', product)\"\n                      />\n                    </div>\n                  </div>\n                </VaCardContent>\n              </VaCard>\n            </div>\n\n            <!-- 无产品状态 -->\n            <div v-else class=\"p-4 text-center text-[var(--va-secondary)]\">该物料下暂无产品</div>\n          </div>\n        </VaCardContent>\n      </VaCard>\n    </div>\n\n    <!-- No data state -->\n    <div v-else class=\"p-4 flex justify-center items-center text-[var(--va-secondary)]\">\n      {{ t('materials.noData') }}\n    </div>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { PropType, computed, ref } from 'vue'\nimport { useForm } from 'vuestic-ui'\nimport { Material, EmptyMaterial } from '../types'\nimport { validators } from '../../../services/utils'\n\nconst props = defineProps({\n  material: {\n    type: Object as PropType<Material | null>,\n    default: null,\n  },\n  saveButtonLabel: {\n    type: String,\n    default: 'Save',\n  },\n})\n\nconst defaultNewMaterial: EmptyMaterial = {\n  material_code: '',\n  material_name: '',\n  product_count: 0,\n  test_items: [],\n}\n\nconst newMaterial = ref<EmptyMaterial>({ ...defaultNewMaterial })\n\nconst isFormHasUnsavedChanges = computed(() => {\n  return Object.keys(newMaterial.value).some((key) => {\n    if (props.material && props.material[key as keyof Material] !== newMaterial.value[key as keyof EmptyMaterial]) {\n      return true\n    }\n\n    return (\n      !props.material &&\n      newMaterial.value[key as keyof EmptyMaterial] !== defaultNewMaterial[key as keyof EmptyMaterial]\n    )\n  })\n})\n\ndefineExpose({\n  isFormHasUnsavedChanges,\n})\n\nconst form = useForm('add-material-form')\n\nconst emit = defineEmits<{\n  (event: 'save', material: Material | EmptyMaterial): void\n  (event: 'close'): void\n}>()\n\nconst onSave = async () => {\n  // 检查必填字段\n  const isValid =\n    newMaterial.value.material_code.trim() !== '' &&\n    newMaterial.value.material_name.trim() !== '' &&\n    newMaterial.value.product_count > 0\n\n  if (isValid) {\n    if (props.material) {\n      // 编辑模式：传回完整的Material对象\n      const updatedMaterial: Material = {\n        ...props.material,\n        material_code: newMaterial.value.material_code,\n        material_name: newMaterial.value.material_name,\n        product_count: newMaterial.value.product_count,\n        test_items: newMaterial.value.test_items,\n      }\n      emit('save', updatedMaterial)\n    } else {\n      // 添加模式：传回EmptyMaterial对象\n      emit('save', newMaterial.value)\n    }\n  }\n}\n\nconst testItemInput = ref('')\n\nconst addTestItem = () => {\n  if (testItemInput.value.trim() && !newMaterial.value.test_items.includes(testItemInput.value.trim())) {\n    newMaterial.value.test_items.push(testItemInput.value.trim())\n    testItemInput.value = ''\n  }\n}\n\nconst removeTestItem = (index: number) => {\n  newMaterial.value.test_items.splice(index, 1)\n}\n\nif (props.material) {\n  newMaterial.value = {\n    material_code: props.material.material_code,\n    material_name: props.material.material_name,\n    product_count: props.material.product_count,\n    test_items: [...props.material.test_items],\n  }\n}\n</script>\n\n<template>\n  <VaForm ref=\"form\" @keydown.enter=\"onSave\">\n    <VaInput\n      v-model=\"newMaterial.material_code\"\n      :label=\"$t('materials.form.materialCode')\"\n      :rules=\"[validators.required]\"\n      class=\"mb-4\"\n      name=\"material_code\"\n    />\n    <VaInput\n      v-model=\"newMaterial.material_name\"\n      :label=\"$t('materials.form.materialName')\"\n      :rules=\"[validators.required]\"\n      class=\"mb-4\"\n      name=\"material_name\"\n    />\n    <VaInput\n      v-model=\"newMaterial.product_count\"\n      :label=\"$t('materials.form.productCount')\"\n      type=\"number\"\n      :rules=\"[validators.required]\"\n      class=\"mb-4\"\n      name=\"product_count\"\n      :min=\"0\"\n    />\n\n    <div class=\"mb-4\">\n      <VaInput\n        v-model=\"testItemInput\"\n        :label=\"$t('materials.form.addTestItem')\"\n        class=\"mb-2\"\n        @keydown.enter.prevent=\"addTestItem\"\n      >\n        <template #appendInner>\n          <VaButton preset=\"plain\" icon=\"add\" color=\"primary\" @click=\"addTestItem\" />\n        </template>\n      </VaInput>\n\n      <div v-if=\"newMaterial.test_items.length > 0\" class=\"flex flex-wrap gap-2\">\n        <VaBadge v-for=\"(item, index) in newMaterial.test_items\" :key=\"index\" :text=\"item\" color=\"info\">\n          <template #prepend>\n            <VaButton preset=\"plain\" icon=\"close\" size=\"small\" color=\"danger\" @click=\"removeTestItem(index)\" />\n          </template>\n        </VaBadge>\n      </div>\n    </div>\n\n    <div class=\"flex justify-end flex-col-reverse sm:flex-row mt-4 gap-2\">\n      <VaButton preset=\"secondary\" color=\"secondary\" @click=\"$emit('close')\">\n        {{ $t('users.cancel') }}\n      </VaButton>\n      <VaButton :disabled=\"!isFormHasUnsavedChanges\" @click=\"onSave\">\n        {{ saveButtonLabel }}\n      </VaButton>\n    </div>\n  </VaForm>\n</template>\n","<!-- EditProductForm.vue -->\n<template>\n  <VaForm ref=\"form\" @submit.prevent=\"onSave\">\n    <VaInput\n      v-model=\"formData.product_serial\"\n      :rules=\"[(v: string) => !!v || '产品序列号不能为空']\"\n      label=\"产品序列号\"\n      class=\"mb-4\"\n    />\n    <VaInput\n      v-model=\"formData.product_name\"\n      :rules=\"[(v: string) => !!v || '产品名称不能为空']\"\n      label=\"产品名称\"\n      class=\"mb-4\"\n    />\n    <VaSelect\n      v-model=\"formData.status\"\n      :options=\"statusOptions\"\n      text-by=\"text\"\n      value-by=\"value\"\n      label=\"状态\"\n      class=\"mb-4\"\n    />\n\n    <div class=\"flex justify-end space-x-2\">\n      <VaButton preset=\"secondary\" @click=\"$emit('close')\">取消</VaButton>\n      <VaButton type=\"submit\" :loading=\"loading\">\n        {{ editingProduct ? '更新产品' : '添加产品' }}\n      </VaButton>\n    </div>\n  </VaForm>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\nimport { Product, EmptyProduct } from '../../../pages/projects/types'\n\ninterface Props {\n  editingProduct?: Product | null\n  loading?: boolean\n}\n\ninterface Emits {\n  (e: 'save', product: Omit<EmptyProduct, 'test_items'>): void\n  (e: 'close'): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  editingProduct: null,\n  loading: false,\n})\n\nconst emit = defineEmits<Emits>()\n\nconst statusOptions = [\n  { value: 'not_started', text: '未开始' },\n  { value: 'in_progress', text: '进行中' },\n  { value: 'completed', text: '已完成' },\n  { value: 'failed', text: '失败' },\n]\n\nconst formData = ref<Omit<EmptyProduct, 'test_items'>>({\n  product_serial: '',\n  product_name: '',\n  material_id: '' as any,\n  status: 'not_started',\n})\n\n// 监听编辑产品的变化\nwatch(\n  () => props.editingProduct,\n  (newProduct) => {\n    if (newProduct) {\n      formData.value = {\n        product_serial: newProduct.product_serial,\n        product_name: newProduct.product_name,\n        material_id: newProduct.material_id,\n        status: newProduct.status,\n      }\n    } else {\n      // 重置表单\n      formData.value = {\n        product_serial: '',\n        product_name: '',\n        material_id: '' as any,\n        status: 'not_started',\n      }\n    }\n  },\n  { immediate: true },\n)\n\nconst onSave = () => {\n  // 基本验证\n  if (!formData.value.product_serial.trim()) {\n    return\n  }\n  if (!formData.value.product_name.trim()) {\n    return\n  }\n\n  emit('save', { ...formData.value })\n}\n</script>\n","<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\nimport { useLocalStorage } from '@vueuse/core'\nimport { useI18n } from 'vue-i18n'\nimport { useMaterials } from './composables/useMaterials'\nimport { useProducts } from '../../composables/useProducts'\nimport MaterialsTable from './widgets/MaterialsTable.vue'\nimport MaterialsCards from './widgets/MaterialsCards.vue'\nimport EditMaterialForm from './widgets/EditMaterialForm.vue'\nimport EditProductForm from '../../components/forms/EditProductForm/EditProductForm.vue'\nimport { Material, EmptyMaterial, Product, EmptyProduct } from './types'\nimport { useModal, useToast } from 'vuestic-ui'\n\nconst doShowAsCards = useLocalStorage('materials-view', true) // 默认显示卡片视图\nconst searchQuery = ref('') // 搜索查询状态\n\nconst { t } = useI18n()\n\nconst materialsComposable = useMaterials()\nconst { materials, update, add, isLoading, remove, pagination, sorting, fetch } = materialsComposable\n\nconst productsComposable = useProducts()\nconst { add: addProduct, update: updateProduct, remove: removeProduct, load: loadProducts } = productsComposable\n\n// 初始化数据\nonMounted(async () => {\n  // 同时加载物料和产品数据\n  await Promise.all([\n    fetch(), // 加载物料数据\n    loadProducts(), // 加载所有产品数据\n  ])\n})\n\nconst materialToEdit = ref<Material | null>(null)\nconst doShowMaterialFormModal = ref(false)\n\n// 产品相关状态\nconst productToEdit = ref<Product | null>(null)\nconst doShowProductFormModal = ref(false)\nconst currentMaterial = ref<Material | null>(null) // 当前操作的物料\n\nconst editMaterial = (material: Material) => {\n  materialToEdit.value = material\n  doShowMaterialFormModal.value = true\n}\n\nconst createNewMaterial = () => {\n  materialToEdit.value = null\n  doShowMaterialFormModal.value = true\n}\n\n// 产品相关操作\nconst addProductToMaterial = (material: Material) => {\n  currentMaterial.value = material\n  productToEdit.value = null\n  doShowProductFormModal.value = true\n}\n\nconst editProduct = (product: Product) => {\n  productToEdit.value = product\n  currentMaterial.value = materials.value.find((m) => m.id === product.material_id) || null\n  doShowProductFormModal.value = true\n}\n\nconst { init: notify } = useToast()\n\nconst onMaterialSaved = async (material: Material | EmptyMaterial) => {\n  try {\n    if ('id' in material) {\n      // 编辑模式：material包含id\n      await update(material as Material)\n      notify({\n        message: t('materials.messages.updated'),\n        color: 'success',\n      })\n    } else {\n      // 添加模式：material不包含id\n      await add(material as EmptyMaterial)\n      notify({\n        message: t('materials.messages.created'),\n        color: 'success',\n      })\n    }\n    doShowMaterialFormModal.value = false\n  } catch (error) {\n    console.error('❌ Error saving material:', error)\n    notify({\n      message: 'Error saving material: ' + (error as Error).message,\n      color: 'danger',\n    })\n  }\n}\n\nconst { confirm } = useModal()\n\nconst onMaterialDeleted = async (material: Material) => {\n  const response = await confirm({\n    title: t('materials.confirm.deleteTitle'),\n    message: t('materials.confirm.deleteMessage', { name: material.material_name }),\n    okText: t('materials.confirm.delete'),\n    size: 'small',\n    maxWidth: '380px',\n  })\n\n  if (!response) {\n    return\n  }\n\n  await remove(material)\n  notify({\n    message: t('materials.messages.deleted'),\n    color: 'success',\n  })\n}\n\n// 产品相关处理函数\nconst onProductSaved = async (product: Omit<EmptyProduct, 'test_items'>) => {\n  try {\n    if (!currentMaterial.value) {\n      throw new Error('No material selected')\n    }\n\n    if (productToEdit.value) {\n      // 编辑模式\n      const updatedProduct: Product = {\n        ...productToEdit.value,\n        ...product,\n        // test_items会在updateProduct中自动设置为与物料一致\n      }\n      await updateProduct(updatedProduct)\n      notify({\n        message: '产品更新成功',\n        color: 'success',\n      })\n    } else {\n      // 添加模式，test_items会在addProduct中自动从物料继承\n      const productToAdd: EmptyProduct = {\n        ...product,\n        test_items: [], // 临时设置，会在addProduct中被物料的test_items覆盖\n      }\n      await addProduct(productToAdd, currentMaterial.value.id)\n      notify({\n        message: '产品添加成功',\n        color: 'success',\n      })\n    }\n\n    // 重新获取物料数据以更新产品数量\n    await fetch()\n\n    doShowProductFormModal.value = false\n  } catch (error) {\n    console.error('❌ Error saving product:', error)\n    notify({\n      message: 'Error saving product: ' + (error as Error).message,\n      color: 'danger',\n    })\n  }\n}\n\nconst onProductDeleted = async (product: Product) => {\n  const response = await confirm({\n    title: t('products.confirm.deleteTitle'),\n    message: t('products.confirm.deleteMessage', { name: product.product_name }),\n    okText: t('products.confirm.delete'),\n    size: 'small',\n    maxWidth: '380px',\n  })\n\n  if (!response) {\n    return\n  }\n\n  try {\n    await removeProduct(product)\n\n    // 重新获取物料数据以更新产品数量\n    await fetch()\n\n    notify({\n      message: t('products.messages.deleted'),\n      color: 'success',\n    })\n  } catch (error) {\n    console.error('❌ Error deleting product:', error)\n    notify({\n      message: 'Error deleting product: ' + (error as Error).message,\n      color: 'danger',\n    })\n  }\n}\n\nconst editFormRef = ref()\n\nconst beforeEditFormModalClose = async (hide: () => unknown) => {\n  if (editFormRef.value.isFormHasUnsavedChanges) {\n    const agreed = await confirm({\n      maxWidth: '380px',\n      message: t('materials.confirm.unsavedChanges'),\n      size: 'small',\n    })\n    if (agreed) {\n      hide()\n    }\n  } else {\n    hide()\n  }\n}\n</script>\n\n<template>\n  <h1 class=\"page-title\">{{ t('menu.projects') }}</h1>\n\n  <VaCard>\n    <VaCardContent>\n      <div class=\"flex flex-col md:flex-row gap-2 mb-2 justify-between items-start md:items-center\">\n        <div class=\"flex flex-col sm:flex-row gap-2 justify-start items-start sm:items-center\">\n          <VaButtonToggle\n            v-model=\"doShowAsCards\"\n            color=\"background-element\"\n            border-color=\"background-element\"\n            class=\"view-mode-toggle\"\n            :options=\"[\n              { label: t('materials.viewMode.cards'), value: true },\n              { label: t('materials.viewMode.table'), value: false },\n            ]\"\n          />\n          <VaInput\n            v-model=\"searchQuery\"\n            :placeholder=\"t('materials.search.placeholder')\"\n            clearable\n            class=\"search-input\"\n          >\n            <template #prependInner>\n              <VaIcon name=\"search\" color=\"secondary\" size=\"small\" />\n            </template>\n          </VaInput>\n        </div>\n        <VaButton icon=\"add\" @click=\"createNewMaterial\">{{ t('materials.form.addTitle') }}</VaButton>\n      </div>\n\n      <MaterialsCards\n        v-if=\"doShowAsCards\"\n        :materials=\"materials\"\n        :loading=\"isLoading\"\n        @edit=\"editMaterial\"\n        @delete=\"onMaterialDeleted\"\n        @addProduct=\"addProductToMaterial\"\n        @editProduct=\"editProduct\"\n        @deleteProduct=\"onProductDeleted\"\n      />\n      <MaterialsTable\n        v-else\n        v-model:sort-by=\"sorting.sortBy\"\n        v-model:sorting-order=\"sorting.sortingOrder\"\n        v-model:pagination=\"pagination\"\n        :materials=\"materials\"\n        :loading=\"isLoading\"\n        :search-query=\"searchQuery\"\n        @edit=\"editMaterial\"\n        @delete=\"onMaterialDeleted\"\n        @addProduct=\"addProductToMaterial\"\n        @editProduct=\"editProduct\"\n        @deleteProduct=\"onProductDeleted\"\n      />\n    </VaCardContent>\n\n    <VaModal\n      v-slot=\"{ cancel, ok }\"\n      v-model=\"doShowMaterialFormModal\"\n      size=\"small\"\n      mobile-fullscreen\n      close-button\n      stateful\n      hide-default-actions\n      :before-cancel=\"beforeEditFormModalClose\"\n    >\n      <h1 v-if=\"materialToEdit === null\" class=\"va-h5 mb-4\">{{ t('materials.form.addTitle') }}</h1>\n      <h1 v-else class=\"va-h5 mb-4\">{{ t('materials.form.editTitle') }}</h1>\n      <EditMaterialForm\n        ref=\"editFormRef\"\n        :material=\"materialToEdit\"\n        :save-button-label=\"materialToEdit === null ? t('materials.form.addTitle') : t('users.save')\"\n        @close=\"cancel\"\n        @save=\"\n          (material) => {\n            onMaterialSaved(material)\n            ok()\n          }\n        \"\n      />\n    </VaModal>\n\n    <!-- 产品表单模态框 -->\n    <VaModal\n      v-slot=\"{ cancel, ok }\"\n      v-model=\"doShowProductFormModal\"\n      size=\"small\"\n      mobile-fullscreen\n      close-button\n      stateful\n      hide-default-actions\n    >\n      <h1 v-if=\"productToEdit === null\" class=\"va-h5 mb-4\">\n        {{ t('products.form.addToMaterial', { materialName: currentMaterial?.material_name }) }}\n      </h1>\n      <h1 v-else class=\"va-h5 mb-4\">{{ t('products.form.editTitle') }}</h1>\n      <EditProductForm\n        :editing-product=\"productToEdit\"\n        @close=\"cancel\"\n        @save=\"\n          (product) => {\n            onProductSaved(product)\n            ok()\n          }\n        \"\n      />\n    </VaModal>\n  </VaCard>\n</template>\n\n<style scoped>\n.view-mode-toggle {\n  min-width: 240px; /* 增加最小宽度以适应英文 */\n  flex-shrink: 0; /* 防止在小屏幕上被压缩 */\n}\n\n.view-mode-toggle :deep(.va-button-toggle__option) {\n  min-width: 120px; /* 增加单个按钮的最小宽度 */\n  white-space: nowrap;\n  padding: 0 16px; /* 增加内边距 */\n  font-size: 0.875rem; /* 稍微调整字体大小 */\n}\n\n.search-input {\n  min-width: 250px; /* 确保搜索框有足够宽度 */\n  max-width: 300px;\n}\n\n/* 响应式设计 */\n@media (min-width: 768px) {\n  .view-mode-toggle {\n    min-width: 280px; /* 在较大屏幕上提供更多宽度 */\n  }\n\n  .view-mode-toggle :deep(.va-button-toggle__option) {\n    min-width: 140px;\n    padding: 0 20px;\n  }\n\n  .search-input {\n    min-width: 300px;\n    max-width: 350px;\n  }\n}\n\n/* 移动端优化 */\n@media (max-width: 767px) {\n  .view-mode-toggle {\n    width: 100%;\n    max-width: 100%;\n  }\n\n  .search-input {\n    width: 100%;\n    min-width: auto;\n    max-width: none;\n  }\n}\n</style>\n"],"names":["getProductStatusText","status","inMemoryMaterials","getMaterials","filters","resolve","search","sortBy","sortingOrder","filteredMaterials","material","inMemoryProducts","product","item","a","b","aValue","bValue","page","perPage","start","end","addMaterial","newMaterial","uuid","updateMaterial","index","m","removeMaterial","p","idx","getProductsByMaterialId","materialId","getAllProducts","addProduct","newProduct","updateProduct","updatedProduct","removeProduct","useMaterialsStore","defineStore","options","data","pagination","updatedMaterial","makePaginationRef","ref","makeSortingRef","makeFiltersRef","useMaterials","isLoading","materialsStore","sorting","fetch","unref","error","materials","computed","onMounted","products","useProducts","addedProducts","updatedProducts","result","materialProducts","filteredProducts","t","useI18n","getProductsByMaterial","columns","defineVaDataTableColumns","props","__props","emit","__emit","sortByVModel","useVModel","sortingOrderVModel","expandedMaterials","query","materialMatch","productMatch","tableData","rows","hasSearchQuery","productsToShow","toggleMaterial","findProductMaterial","productId","getProductStatusInfo","totalPages","loadByMaterialId","productLoadingStates","toggleExpanded","loadProductsForMaterial","isMaterialExpanded","getMaterialProducts","isProductLoading","defaultNewMaterial","isFormHasUnsavedChanges","key","__expose","form","useForm","onSave","testItemInput","addTestItem","removeTestItem","statusOptions","formData","watch","doShowAsCards","useLocalStorage","searchQuery","materialsComposable","update","add","remove","productsComposable","loadProducts","materialToEdit","doShowMaterialFormModal","productToEdit","doShowProductFormModal","currentMaterial","editMaterial","createNewMaterial","addProductToMaterial","editProduct","notify","useToast","onMaterialSaved","confirm","useModal","onMaterialDeleted","onProductSaved","productToAdd","onProductDeleted","editFormRef","beforeEditFormModalClose","hide"],"mappings":"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"}